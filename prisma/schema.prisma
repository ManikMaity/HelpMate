// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @default(uuid())
  clerkUserId String @unique
  name String?
  email String @unique
  username String @unique
  imageUrl String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  events Event[] @relation("UserEvents")
  bookings Booking[] @relation("UserBookings")
  avalabilities Availability?
  role String?
  about String?
}

model Event {
  id String @id @default(uuid())
  title String
  description String
  duration Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId String
  user User @relation("UserEvents", fields: [userId], references: [id])
  bookings Booking[]
  isPrivate Boolean @default(true)
}

model Booking {
  id String @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  eventId String
  event Event @relation(fields: [eventId], references: [id], onDelete: Cascade)
  userId String
  user User @relation("UserBookings", fields: [userId], references: [id])
  email String
  name String
  addionalInfo String?
  startTime DateTime
  endTime DateTime
  meetingLink String
  googleEventId String
}

model Availability {
  id String @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId String @unique
  user User @relation(fields: [userId], references: [id])
  days DaysAvailablity[]
  timeGap Int
}

model DaysAvailablity {
  id String @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  availabilityId String
  availability Availability @relation(fields: [availabilityId], references: [id], onDelete: Cascade)
  day DayOfWeek
  startTime String
  endTime String
}

enum DayOfWeek {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}